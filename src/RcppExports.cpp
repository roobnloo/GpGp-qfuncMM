// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Linv_mult
NumericVector Linv_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _GpGpQFuncMM_Linv_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(Linv_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// L_mult
NumericVector L_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _GpGpQFuncMM_L_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(L_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// Linv_t_mult
NumericVector Linv_t_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _GpGpQFuncMM_Linv_t_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(Linv_t_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// L_t_mult
NumericVector L_t_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _GpGpQFuncMM_L_t_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(L_t_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_Linv
NumericMatrix vecchia_Linv(arma::vec covparms, StringVector covfun_name, arma::mat locs, arma::mat NNarray, int start_ind, Rcpp::Nullable<arma::mat> additional_info);
RcppExport SEXP _GpGpQFuncMM_vecchia_Linv(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP locsSEXP, SEXP NNarraySEXP, SEXP start_indSEXP, SEXP additional_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type NNarray(NNarraySEXP);
    Rcpp::traits::input_parameter< int >::type start_ind(start_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type additional_info(additional_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_Linv(covparms, covfun_name, locs, NNarray, start_ind, additional_info));
    return rcpp_result_gen;
END_RCPP
}
// test_qfunc_cov
arma::mat test_qfunc_cov(arma::mat stage1_parms, arma::vec covparms, arma::mat locs);
RcppExport SEXP _GpGpQFuncMM_test_qfunc_cov(SEXP stage1_parmsSEXP, SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type stage1_parms(stage1_parmsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_qfunc_cov(stage1_parms, covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// test_d_qfunc_cov
arma::cube test_d_qfunc_cov(arma::mat stage1_parms, arma::vec covparms, arma::mat locs);
RcppExport SEXP _GpGpQFuncMM_test_d_qfunc_cov(SEXP stage1_parmsSEXP, SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type stage1_parms(stage1_parmsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_d_qfunc_cov(stage1_parms, covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_profbeta_loglik_grad_info
List vecchia_profbeta_loglik_grad_info(NumericVector covparms, StringVector covfun_name, NumericVector y, NumericMatrix X, const NumericMatrix locs, NumericMatrix NNarray, NumericMatrix additional_info);
RcppExport SEXP _GpGpQFuncMM_vecchia_profbeta_loglik_grad_info(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP ySEXP, SEXP XSEXP, SEXP locsSEXP, SEXP NNarraySEXP, SEXP additional_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NNarray(NNarraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type additional_info(additional_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_profbeta_loglik_grad_info(covparms, covfun_name, y, X, locs, NNarray, additional_info));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_profbeta_loglik
List vecchia_profbeta_loglik(NumericVector covparms, StringVector covfun_name, NumericVector y, NumericMatrix X, const NumericMatrix locs, NumericMatrix NNarray);
RcppExport SEXP _GpGpQFuncMM_vecchia_profbeta_loglik(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP ySEXP, SEXP XSEXP, SEXP locsSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_profbeta_loglik(covparms, covfun_name, y, X, locs, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_grouped_profbeta_loglik_grad_info
List vecchia_grouped_profbeta_loglik_grad_info(NumericVector covparms, StringVector covfun_name, NumericVector y, NumericMatrix X, const NumericMatrix locs, List NNlist, NumericMatrix additional_info);
RcppExport SEXP _GpGpQFuncMM_vecchia_grouped_profbeta_loglik_grad_info(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP ySEXP, SEXP XSEXP, SEXP locsSEXP, SEXP NNlistSEXP, SEXP additional_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< List >::type NNlist(NNlistSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type additional_info(additional_infoSEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_grouped_profbeta_loglik_grad_info(covparms, covfun_name, y, X, locs, NNlist, additional_info));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_grouped_profbeta_loglik
List vecchia_grouped_profbeta_loglik(NumericVector covparms, StringVector covfun_name, NumericVector y, NumericMatrix X, const NumericMatrix locs, List NNlist);
RcppExport SEXP _GpGpQFuncMM_vecchia_grouped_profbeta_loglik(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP ySEXP, SEXP XSEXP, SEXP locsSEXP, SEXP NNlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< List >::type NNlist(NNlistSEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_grouped_profbeta_loglik(covparms, covfun_name, y, X, locs, NNlist));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_grouped_meanzero_loglik
List vecchia_grouped_meanzero_loglik(NumericVector covparms, StringVector covfun_name, NumericVector y, const NumericMatrix locs, List NNlist);
RcppExport SEXP _GpGpQFuncMM_vecchia_grouped_meanzero_loglik(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP ySEXP, SEXP locsSEXP, SEXP NNlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< List >::type NNlist(NNlistSEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_grouped_meanzero_loglik(covparms, covfun_name, y, locs, NNlist));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GpGpQFuncMM_Linv_mult", (DL_FUNC) &_GpGpQFuncMM_Linv_mult, 3},
    {"_GpGpQFuncMM_L_mult", (DL_FUNC) &_GpGpQFuncMM_L_mult, 3},
    {"_GpGpQFuncMM_Linv_t_mult", (DL_FUNC) &_GpGpQFuncMM_Linv_t_mult, 3},
    {"_GpGpQFuncMM_L_t_mult", (DL_FUNC) &_GpGpQFuncMM_L_t_mult, 3},
    {"_GpGpQFuncMM_vecchia_Linv", (DL_FUNC) &_GpGpQFuncMM_vecchia_Linv, 6},
    {"_GpGpQFuncMM_test_qfunc_cov", (DL_FUNC) &_GpGpQFuncMM_test_qfunc_cov, 3},
    {"_GpGpQFuncMM_test_d_qfunc_cov", (DL_FUNC) &_GpGpQFuncMM_test_d_qfunc_cov, 3},
    {"_GpGpQFuncMM_vecchia_profbeta_loglik_grad_info", (DL_FUNC) &_GpGpQFuncMM_vecchia_profbeta_loglik_grad_info, 7},
    {"_GpGpQFuncMM_vecchia_profbeta_loglik", (DL_FUNC) &_GpGpQFuncMM_vecchia_profbeta_loglik, 6},
    {"_GpGpQFuncMM_vecchia_grouped_profbeta_loglik_grad_info", (DL_FUNC) &_GpGpQFuncMM_vecchia_grouped_profbeta_loglik_grad_info, 7},
    {"_GpGpQFuncMM_vecchia_grouped_profbeta_loglik", (DL_FUNC) &_GpGpQFuncMM_vecchia_grouped_profbeta_loglik, 6},
    {"_GpGpQFuncMM_vecchia_grouped_meanzero_loglik", (DL_FUNC) &_GpGpQFuncMM_vecchia_grouped_meanzero_loglik, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_GpGpQFuncMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
